Απαραίτητες βιβλιοθήκες:
random, collections, networkx, numpy
Αν κάποια δεν είναι εγκατεστημένη πρέπει να εγκατασταθεί με
    pip install <όνομα βιβλιοθήκης>

Παράδειγμα εκτέλεσης κώδικα (βασική στρατηγική):
python3 moran_challenge_tournament.py -p0 omada01_moran.PlayerOmada01 -p1 omada51_moran.PlayerOmada51 -p2 omada52_moran.PlayerOmada52 -p3 omada53_moran.PlayerOmada53 -num_of_games 24 -verbose -seed 33

Χρησιμοποιούμε έναν εκδικητικό αλγόριθμο:
1. Βρίσκει όλους τους γειτονικούς κόμβους και σημείωνε σε ποιόν παίκτη/αντίπαλο ανήκει ο καθένας.
2. Ταξινομεί τους αντιπάλους με βάση των αριθμό επιθέσεων που έχουν κάνει στην ομάδα μας (attack count)
3. Βρίσκει τον/τους αντίπαλο/ους με το υψηλότερο attack count.
   Στην περίπτωση που στην κορυφή της κατάταξης είναι δυο ή τρεις αντίπαλοι (δηλαδή έχουν ίδιο attack count),
   επιλέγει τον μεγαλύτερο (δηλαδή αυτόν με τους περισσότερους κόμβους).
4. Στη συνέχεια επιλέγει τον κόμβο με το χαμηλότερο degree centrality που ανήκει σε αυτόν τον παίκτη.


Άλλες στρατηγικές:
Α. Συνδυασμός της βασικής στρατηγικής παραπάνω με τη διαφορά ότι οι κόμβοι του αντιπάλου με το μικρότερο μέγεθος αποκλείονται αμέσως. (exclude_smallest_player)
Β. Βασική στρατηγική με τη διαφορά ότι επιλέγεται ο κόμβος με το μέγιστο degree centrality.
C. Βασική στρατηγική με τη διαφορά ότι επιλέγεται ο κόμβος με το διάμεσο degree centrality.
D. Βασική στρατηγική με τη διαφορά ότι επιλέγεται ο μικρότερος παίκτης σε περίπτωση ισοψηφίας attack count.
E. Βασική στρατηγική με τη διαφορά ότι επιλέγεται ο κόμβος είτε με το μέγιστο degree centrality είτε με το ελάχιστο degree centrality,
ανάλογα το ποσοστού των κόμβων που κατέχει η ομάδα μας στον γράφο. (adaptive)
F. Βασική στρατηγική με τη διαφορά ότι επιλέγεται ο κόμβος είτε με το διάμεσο degree centrality είτε με το ελάχιστο degree centrality,
ανάλογα το ποσοστού των κόμβων που κατέχει η ομάδα μας στον γράφο. (adaptive)
G. (Υπό κατασκευή) Βασική στρατηγική με τη διαφορά ότι επιλέγεται ο κόμβος με το:
διάμεσο degree centrality, ελάχιστο degree centrality, μέγιστο degree centrality, από νευρωνικό δίκτυο ενισχυμένης μάθησης
λαμβάνοντας ως είσοδο το ποσοστό των κόμβων που κατέχει η ομάδα μας στον γράφο.

Για την στρατηγική G απαιτούνται επιπλέον οι βιβλιοθήκες:
matplotlib, keras.layers, keras.optimizers, keras.models, tensorflow
Επίσης πρέπει να τεθεί η μεταβλητή USE_NN=True στο αρχείο omada01_moran.py στην κλάση PlayerOmada01
Τέλος πρέπει να αφαιρεθεί η δίεση "# " από την γραμμή 6, δηλαδή να γίνει uncomment το "import omada01.omada01_nn"

Υπάρχουν και άλλα συνοδευτικά και αρχεία στον φάκελο omada01:
1. model_weights.h5 = αρχείο με τα βάρη που υπολόγισε το νευρωνικό δίκτυο
2. train_progress.png = διάγραμμα που δείχνει το score μετά από κάθε επανάληψη της εκπαίδευσης του νευρωνικού δικτύου
3. moran-strategies-scores.xlsx = αρχείο excel που δείχνει τα scores για διάφορες στρατηγικές δοκιμάσμενες με 10 διαφορετικά seeds.
Επιπλέον, υπολογίζονται μέσες τιμές, δείκτες μεταβλητότητας και διαστήματα εμπιστοσύνης για τις τιμες αυτές
4. omada01_nn.py = υλοποίηση νευρωνικού δικτύου
5. omada01_nn_trainer.py = εκπαίδευση νευρωνικού δικτύου